class Binary
     attr_accessor :root
     def initialize()
         @root=nil
     end
     
     class Node
        attr_accessor :left, :right,:value 
        def initialize(value)
            @value=value
            @left=nil
            @right=nil
        end
      end
  
     def inorder(node)
        return if node.nil?
        inorder(node.left)
        print "#{node.value} "  
        inorder(node.right)
     end
     
     def insert(value)
        if @root == nil
            @root = Node.new(value)    
            return @root
        else
            temp=@root
            q=[]
            q.append(temp)
            while(q.length())
                temp=q[0]
                q.pop()
                if not temp.left
                   temp.left=Node.new(value)
                   break
                else
                   q.push(temp.left)
                end
                if not temp.right
                   temp.right=Node.new(value)
                   break
                else
                   q.push(temp.right)
                end
            end
         end
     end

     def deletion(value)
         if @root==nil
              return nil
         end
         if @root.left==nil and @root.right==nil
            if root.value==key
               return nil
            end
         end
         
         key_node=nil
         temp=nil
         last=nil
         q=Queue.new
         q.push(root)
         while !q.empty?
              
              temp=q.pop()
              puts "!! #{temp.value}  !!"
              if temp.value==value
                  key_node=temp
              end
              if temp.left
                 last=temp
                 q.push(temp.left)
              end
              if temp.right
                 last=temp
                 q.push(temp.right)
              end
         end
         if key_node!=nil
            key_node.value=temp.value
            if last.right==temp
               last.right=nil
            else
               last.left=nil
            end
            temp=nil
         end
        return root
     end
end
