class Traversal
     attr_accessor :root
     def initialize(root) 
         @root=root
     end
 
     def print_Inorder(node)
        return if node.nil?
        print_Inorder(node.left)
        print "node.data " 
        print_Inorder(node.right)
     end
    def print_PreOrder(node)
        return if node.nil?
        print "node.data "
        print_PreOrder(node.left)
        print_PreOrder(node.right)
    end
    def print_PostOrder(node)
        return if node.nil?
        print_PostOrder(node.left)
        print_PostOrder(node.right)
	print " node.data"   
    end
  
    def InorderLoopWithStack(root)
      stack=Stack.new
      temp=root
      while(true)
         if !temp.nil?
            stack.push(temp)
            temp=temp.left
         else
            if stack.empty?
               break
            else
                x=stack.pop
                print "#{x.data} "
                x=x.right
            end
          end
        end
    end
    def PreOrderLoop(root)
        stack=Stack.new
        temp=root
        while(true)
           if !temp.nil?
              print "#{temp.data} "
              stack.push(temp)
              temp=temp.left
           else
              if stack.empty?
               break
              else
                temp=stack.pop
                temp=temp.right
               end
            end
        end
    end   
    def PostOrderLoop(root)
        stack=Stack.new
        temp=root
        while(true)
           if !temp.nil?
              stack.push(temp)
              temp=temp.left
           else
              if stack.empty?
               break
              else
                temp=stack.pop
                temp=temp.right
                print "#{temp.data} "
               end
            end
        end
    end
end


class TreeNode
  attr_accessor :data,:left,:right
  
  def initialize(data)
     @data=data
     @left=nil
     @right=nil
  end
end

root=TreeNode.new(0)
root.left=TreeNode.new(1)
root.right=TreeNode.new(2)  
root.left.left=TreeNode.new(3)
root.left.right=TreeNode.new(4)
root.right.left=TreeNode.new(5) 
root.right.right=TreeNode.new(6) 

tree=Traversal.new(root)