class Node
    attr_accessor :val, :next
   def initialize(val)
       @val = val  
       @next = nil
   end
end
class CircularLinkedList
    attr_accessor :head,:length
   def initialize()
       @head = nil
        @length = 0
   end
 #Insert between two Node
   def insert_next(prev,data)
     newNode=Node.new(data)
     if @length==0
        @head=newNode.next=newNode
        puts "#{data} is inserted in head position  "
     else
        newNode.next=prev.next
        prev.next=newNode
        puts "#{data} is inserted after #{prev.val}"
     end
     @length+=1
   end
#insert at end
     def insert(data)
       newNode=Node.new(data)
       return insert_next(nil,data)if length==0
       return insert_next(@head,data) if length==1
       temp=@head
       i=0
       while i<@length-1
            temp=temp.next
            i=i+1
       end
       insert_next(temp,data)
      end
#printList
     def full_scan
    	return nil unless block_given?
        temp = @head
    	loop do
          yield temp
          break if (temp.next == @head)
        end
     end
    def print
       if @length == 0
          puts "empty"
       else
          self.full_scan { |item| puts item.val }
    end
end
def remove node
      return nil unless node
      return nil unless @length > 0
      return remove_next node if (@length == 1)
      temp=@head
      prev = nil
      while(temp.val!=node)
          prev=temp
          temp=temp.next
      end
      remove_next prev
 end

 # Removes the node that is next to the specified node.
 def remove_next (prev)
             return nil unless @length>0
             temp=@head
             unless prev
               temp=temp.next
             else
               if prev.next=prev
                  @head=nil
               else
                   removeNode=prev.next  
                   prev.next=removeNode.next
                   removeNode.next=nil
                  if removeNode==@head
                        @head=removeNode.next
                   end
                 end
              end
             @length-=1
          end
 end

