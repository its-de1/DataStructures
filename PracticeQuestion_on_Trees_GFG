#Check BST
boolean isBST(Node node)
    {
       if (node == null)
        return true;
     
    /* False if left is > than node */
    if (node.left != null && node.left.data > node.data)
        return false;
     
    /* False if right is < than node */
    if (node.right != null && node.right.data < node.data)
        return false;
     
    /* False if, recursively, the left or right is not a BST */
    if (!isBST(node.left) || !isBST(node.right))
        return false;
     
    /* Passing all that, it's a BST */
    return true;
    }
    
  #Diameter of a Binary Tree
  def diameter(self,root):
        # Code here
        def dia(root):
            if not root:
                return 0
            nonlocal ans
            
            l=dia(root.left)
            r=dia(root.right)
            
            ans=max(ans,1+l+r)
            
            return 1+max(l,r)
            
        ans=float("-inf")
        dia(root)
        return ans
  
 #Check for Balanced Tree
  def isBalanced(self,root):
        ans = self.isBalancedUtil(root)
        if ans != -1:
            return True
        return False
        
    def isBalancedUtil(self,root):
        if root is None:
            return 0
        lh = self.isBalancedUtil(root.left)
        if lh == -1:
            return -1
        rh = self.isBalancedUtil(root.right)
        # print(lh,rh)
        if rh == -1:
            return -1
        if abs(lh-rh) > 1:
            return -1
        return max(lh, rh) + 1


#Determine if Two Trees are Identical 
def isIdentical(self,root1, root2):
        # Code here
        if(root1==None and root2==None):
            return(True)
        if(root1!=None and root2==None):
            return False
        if(root1==None and root2!=None):
            return False
        if(root1.data!=root2.data):
            return(False)
        else:
           return(self.isIdentical(root1.left,root2.left) and self.isIdentical(root1.right,root2.right))

#Mirror Tree
def mirrortraversal(self,root,res):
        if root:
            root.left,root.right = root.right,root.left
            self.mirrortraversal(root.left,res)
            res.append(root.data)
            self.mirrortraversal(root.right,res)

        return  res
    def mirror(self,root):
        # Code here
        res = []
        val = self.mirrortraversal(root,res)
        return val
        
#Vertical Traversal of Binary Tree 
def verticalOrder(self, root): 
        #Your code here
        levels = {}
        q = [(root, 0)]
        while q:
            nd, ind = q.pop(0)
   
            if ind not in levels:
                levels[ind] = [nd.data]
            else:
                levels[ind].append(nd.data)
            if nd.left:
                q.append((nd.left, ind + 1))
   
            if nd.right:
                q.append((nd.right, ind - 1))
               
        op = []
        for v in sorted(levels, reverse=True):
            op += levels[v]
            return op
       
#Boundary Traversal of binary tree
def printBoundaryView(self, root):
        # Code here
        if (root == None): return []
        res, stk = deque(), deque()
        res.append(root.data)
        if (root.left != None):
            stk.append((root.left, 0))
            while (stk):
                tree_node, curr_diag = stk.pop()
                if ((curr_diag == 0) or ((tree_node.left == None) and (tree_node.right == None))): res.append(tree_node.data)
                if (tree_node.right != None): stk.append((tree_node.right, curr_diag if (tree_node.left == None) else curr_diag + 1))
                if (tree_node.left != None): stk.append((tree_node.left, curr_diag))
        if (root.right != None):
            other_res = deque()
            stk.append((root.right, 0))
            while (stk):
                tree_node, curr_diag = stk.pop()
                if ((curr_diag == 0) or ((tree_node.left == None) and (tree_node.right == None))): other_res.appendleft(tree_node.data)
                if (tree_node.left != None): stk.append((tree_node.left, curr_diag if (tree_node.right == None) else curr_diag + 1))
                if (tree_node.right != None): stk.append((tree_node.right, curr_diag))
            res.extend(other_res)
        return res
    
 #Sum Tree
 def isSumTree(self,root):
        # Code here
        def getSum(root:Node):
            if not root:
                return 0
           
            return root.data + getSum(root.left) + getSum(root.right)
       
        def dfs(root:Node):
       
            if not root:
                return True
           
            sm = True
            if root.left and root.right:
                sm = ((getSum(root) - root.data) == root.data)
               
            return sm and dfs(root.left) and dfs(root.right)
       
        return dfs(root)
     
 #Height of Binary Tree
 def height(self, root):
        # code here
        if root==None:
            return 0
        lheight=Solution.height(self,root.left)
        rheight=Solution.height(self,root.right)
        if lheight<rheight:
            return rheight+1
        return lheight+1
   
 #Postorder Traversal (Iterative) 
 def postOrder(self,node):
        # code here
        q = [node]
        ans = []
       
        while(q):
            val = q.pop(-1)
            if val.left:
                left = val.left
                val.left = None
                q.append(val)
                q.append(left)
                continue
            if val.right:
                right = val.right
                val.right = None
                q.append(val)
                q.append(right)
                continue
            ans.append(val.data)
           
        return ans
     
 #Inorder Traversal (Iterative)
 def inOrder(self, root):
        # code here
        if root is None:
            return 
        st = []
        curr = root
       
        while curr!= None:
           st.append(curr)
           curr = curr.left
       
        while len(st)>0:
            curr = st.pop()
            print(curr.data,end=" ")
            curr = curr.right
           
            while curr!=None:
               st.append(curr)
               curr = curr.left
        return st
     
#Preorder traversal (Iterative) 
def preOrder(self,root):
        # code here
        if root ==None:
           return 
        st = [root]
        while len(st)>0:
            curr = st.pop()
            print(curr.data, end=" ")
            if curr.right is not None:
                st.append(curr.right)
       
            if curr.left is not None:
                st.append(curr.left)
        return st
        
        
 #Boundary Traversal of binary tree
 def printBoundaryView(self, root):
        # Code here
        if (root == None): return []
        res, stk = deque(), deque()
        res.append(root.data)
        if (root.left != None):
            stk.append((root.left, 0))
            while (stk):
                tree_node, curr_diag = stk.pop()
                if ((curr_diag == 0) or ((tree_node.left == None) and (tree_node.right == None))): res.append(tree_node.data)
                if (tree_node.right != None): stk.append((tree_node.right, curr_diag if (tree_node.left == None) else curr_diag + 1))
                if (tree_node.left != None): stk.append((tree_node.left, curr_diag))
        if (root.right != None):
            other_res = deque()
            stk.append((root.right, 0))
            while (stk):
                tree_node, curr_diag = stk.pop()
                if ((curr_diag == 0) or ((tree_node.left == None) and (tree_node.right == None))): other_res.appendleft(tree_node.data)
                if (tree_node.left != None): stk.append((tree_node.left, curr_diag if (tree_node.right == None) else curr_diag + 1))
                if (tree_node.right != None): stk.append((tree_node.right, curr_diag))
            res.extend(other_res)
        return res
    
 #Sum Tree
 def isSumTree(self,root):
        # Code here
        def getSum(root:Node):
            if not root:
                return 0
           
            return root.data + getSum(root.left) + getSum(root.right)
       
        def dfs(root:Node):
       
            if not root:
                return True
           
            sm = True
            if root.left and root.right:
                sm = ((getSum(root) - root.data) == root.data)
               
            return sm and dfs(root.left) and dfs(root.right)
       
        return dfs(root)
     
 #Height of Binary Tree
 def height(self, root):
        # code here
        if root==None:
            return 0
        lheight=Solution.height(self,root.left)
        rheight=Solution.height(self,root.right)
        if lheight<rheight:
            return rheight+1
        return lheight+1
   
 #Postorder Traversal (Iterative) 
 def postOrder(self,node):
        # code here
        q = [node]
        ans = []
       
        while(q):
            val = q.pop(-1)
            if val.left:
                left = val.left
                val.left = None
                q.append(val)
                q.append(left)
                continue
            if val.right:
                right = val.right
                val.right = None
                q.append(val)
                q.append(right)
                continue
            ans.append(val.data)
           
        return ans
     
 #Inorder Traversal (Iterative)
 def inOrder(self, root):
        # code here
        if root is None:
            return 
        st = []
        curr = root
       
        while curr!= None:
           st.append(curr)
           curr = curr.left
       
        while len(st)>0:
            curr = st.pop()
            print(curr.data,end=" ")
            curr = curr.right
           
            while curr!=None:
               st.append(curr)
               curr = curr.left
        return st
     
#Preorder traversal (Iterative) 
def preOrder(self,root):
        # code here
        if root ==None:
           return 
        st = [root]
        while len(st)>0:
            curr = st.pop()
            print(curr.data, end=" ")
            if curr.right is not None:
                st.append(curr.right)
       
            if curr.left is not None:
                st.append(curr.left)
        return st
      
 #Kth largest element in BST 
 def kthLargest(self,root, k):
        #your code here
        li=[]
        def posti(root,k):
            nonlocal li
            if not root:
                return
            posti(root.right,k)
            if len(li)==k:
                return
            li.append(root.data)
            posti(root.left,k)
            
            
        posti(root,k)
        return li[-1]
  
  #Children Sum Parent 
  def isSumProperty(self, root):
        # code here
        if root.left == None and root.right == None :
            return 1
        elif root.left == None:
            return 1 if (root.data == root.right.data) and self.isSumProperty(root.right) else 0
        elif root.right == None:
            return 1 if (root.data == root.left.data) and self.isSumProperty(root.left) else 0
        else:
            return 1 if (root.data == root.left.data+root.right.data) and self.isSumProperty(root.left) and self.isSumProperty(root.right) else 0

#Odd even level difference
def getLevelDiff(self, root):
        # Code here
        flag = True
        q = [root]
        oddS = 0
        evenS = 0
       
        while q:
            n = len(q)
            temp = 0
            for _ in range(n):
                node = q.pop(0)
                temp += node.data
                if node.left:
                    q.append(node.left)
                if node.right:
                    q.append(node.right)
            if flag:
                oddS += temp
            else:
                evenS += temp
            flag = not flag
        return oddS-evenS
       
 #Array to BST
 def get_new_list(self,array,new_list):
        n=len(array)
        if n!=0:
            if n%2 !=0:
                middle_index=n//2
            else:
                middle_index=n//2-1
            new_list.append(array[middle_index])
            array.pop(middle_index)
            self.get_new_list(array=array[:middle_index],new_list=new_list)
            self.get_new_list(array=array[middle_index:],new_list=new_list)
        
	def sortedArrayToBST(self, nums):
	    # code here
        new_list=[]
        self.get_new_list(array=nums,new_list=new_list)
        nums=new_list
        return nums
       
  #Largest value in each level
  def largestValues(self, root):
        #code here
        q=deque([])
        bfs=[]
        ans=[]
        q.append(root)
        while(len(q)!=0):
            lev=[]
            level=len(q)
            for i in range(level):
                cur=q.popleft()
                lev.append(cur.data)
                if(cur.left!=None):
                    q.append(cur.left)
                if(cur.right!=None):
                    q.append(cur.right)
            bfs.append(lev)
        for i in range(len(bfs)):
            maxi=max(bfs[i])
               # print(maxi)
            ans.append(maxi)
        return(ans)
    
  #Inorder Successor in BST
  def inorderSuccessor(self, root, x):
        # Code here
        ans = None
        while root != None:
            if root.data > x.data:
                ans = root
                root = root.left
            else:
                root = root.right
        return ans
        
#Find a pair with given target in BST
def inorder(self , root , arr):
        if root == None:
            return
        self.inorder(root.left , arr)
        arr.append(root.data)
        self.inorder(root.right , arr)
    def isPairPresent(self,root, target): 
        arr = []
        self.inorder(root , arr)
        low  = 0
        high = len(arr) - 1
       
        while low < high:
            curr = arr[low] + arr[high]
            if curr == target:
                return 1
               
            if curr < target:
                low+=1
            if curr> target:
                high-=1
        return 0

#Maximum sum leaf to root path
def maxPathSum(self, root):
        #code here
        ans = [0]
        res = [-999999999]
        self.preorder(root, ans, res)
        return res[0]
       
    def preorder(self, root, ans, res):
        if root == None:
            return
        ans[0] += root.data
        if root.left == root.right == None:
            res[0] = max(res[0], ans[0])
        self.preorder(root.left, ans, res)
        self.preorder(root.right, ans, res)
        ans[0] -= root.data

#Remove BST keys outside given range
def removekeys(self, root, l, r):
        #code here
   
        if root==None:
            return 
        root.left = Solution.removekeys(self,root.left,l,r)
        root.right = Solution.removekeys(self,root.right,l,r)
        if root.data < l:
            rChild = root.right
            return rChild
        
        if root.data > r:
            lChild = root.left
            return lChild    
        
        return root    
	
#BST to greater sum tree
class Solution:
    def transformTree(self, root):
        ans = [0]
        self.help(root, ans)
        return root
    def help(self, root, ans):
            if root == None:
                return
            self.help(root.right, ans)
            x = root.data
            root.data = ans[0]
            ans[0] += x
            self.help(root.left, ans)
	 
#Construct Tree from Preorder Traversal
def rec_build_tree(pre, preLN, idx):
    if idx == len(pre):
        return None, idx
    root = Node(pre[idx])
    root_type = preLN[idx]
    idx += 1
    if root_type == 'N':
        root.left, idx = rec_build_tree(pre, preLN, idx)
        root.right, idx = rec_build_tree(pre, preLN, idx)
    return root, idx
def constructTree(pre, preLN, n):
    # code here
    idx = 0
    root, _ = rec_build_tree(pre, preLN, idx)
    return root
   
#Clone a Binary Tree
def simple_clone(self, root):
        if root is None:
            return None
        else:
            new_root = Node(root.data)
            if root.random:
                new_root.random = Node(root.random.data)
            new_root.left = self.simple_clone(root.left)
            new_root.right = self.simple_clone(root.right)
            
        return new_root
    def cloneTree(self, tree):
        #code here
        new_root = self.simple_clone(root)
        
        return new_root

#Maximum sum of Non-adjacent nodes
def solve(root, dp):
    if not root:
        return 0
   
    if root in dp:
        return dp[root]
    incl = root.data
    if root.left:
        incl +=solve(root.left.left, dp)
        incl +=solve(root.left.right, dp)
    if root.right:
        incl +=solve(root.right.left, dp)
        incl +=solve(root.right.right, dp)
    excl = solve(root.left, dp) + solve(root.right, dp)
    dp[root] = max(incl, excl)
    return dp[root]
class Solution:
   #Function to return the maximum sum of non-adjacent nodes.
   def getMaxSum(self,root):
       ans = solve(root, dict())
       return ans
     
  
#Sum Tree
def isSumTree(self,root):
        # Code here
        def getSum(root:Node):
            if not root:
                return 0
           
            return root.data + getSum(root.left) + getSum(root.right)
       
        def dfs(root:Node):
       
            if not root:
                return True
           
            sm = True
            if root.left and root.right:
                sm = ((getSum(root) - root.data) == root.data)
               
            return sm and dfs(root.left) and dfs(root.right)
       
        return dfs(root)
	
#Check if subtree
def isSubTree(self, T, S):
        # Code her
        if not T:
            return False
        if not S:
            return True
        if Solution.mirror(T,S):
            return True
        return (self.isSubTree(T.left,S) or self.isSubTree(T.right,S))
        
    def mirror(t,s):
        if not s or not t:
            return t==s
        return (t.data==s.data) and Solution.mirror(t.left,s.left) and Solution.mirror(t.right,s.right)
