# BST
class Node 
    attr_accessor :value, :left, :right
    def initialize(value)
        @value = value
        @left = nil
        @right = nil
    end
end

class BST
    attr_accessor :root, :size
    def initialize()
        @root = nil
        @size = 0
    end

    def insert(value)
        if @root == nil
            @root = Node.new(value)    
        else 
            curr_node = @root
            previous_node = @root
            while curr_node != nil 
                previous_node = curr_node
                if value < curr_node.value 
                    curr_node = curr_node.left
                else
                    curr_node = curr_node.right
                end
            end
            if value < previous_node.value 
                previous_node.left = Node.new(value)
            else
                previous_node.right = Node.new(value)
            end        
        end
        @size += 1
    end
end

def inorder(node)
        return if node.nil?
        inorder(node.left)
        print "#{node.value} "  
        inorder(node.right)
end

def contains?(value, node = self.root)
        if node == nil
            return false
        elsif value < node.value 
            return contains?(value, node.left)
        elsif value > node.value
            return contains?(value, node.right)
        else
            return true
        end  
end
